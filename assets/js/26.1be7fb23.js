(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{546:function(t,s,a){"use strict";a.r(s);var r=a(35),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据结构和算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法"}},[t._v("#")]),t._v(" 数据结构和算法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("这一模块主要是记录自己了解过的数据结构和相关的算法。")])]),t._v(" "),a("h2",{attrs:{id:"为什么要学习数据结构和算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习数据结构和算法"}},[t._v("#")]),t._v(" 为什么要学习数据结构和算法")]),t._v(" "),a("p",[t._v("计算机科学家尼克劳斯·沃思（Nicklaus Wirth）写过一本计算机程序设计教材，书名是《算法 + 数据结构 = 程序》（Algorithms + Data Structures = Programs，Prentice-Hall）。这个书名就概括了计算机编程的精要。除了“Hello world!”等无关紧要的程序，任何一个有些规模的程序都需要某种类型的数据结构来保存程序中用到的数据，还需要一个或多个算法将数据从输入转换为输出。")]),t._v(" "),a("p",[t._v("对于那些没有在学校学习过计算机科学的程序员来说，唯一熟悉的数据结构就是数组。在处理一些问题时，数组无疑是很好的选择，但对于很多复杂的问题，数组就显得太过简陋了。大多数有经验的程序员都愿意承认这样一个事实：对于很多编程问题，当他们想出一个合适的数据结构，设计和实现解决这些问题的算法就变得手到擒来。")]),t._v(" "),a("p",[t._v("二叉查找树（BST）就是一个这样的例子。设计二叉查找树的目的是为了方便查找一组数据中的最小值和最大值，由这个数据结构自然引申出一个查找算法，该算法比目前最好的查找算法效率还要高。不熟悉二叉查找树的程序员可能会使用一个更简单的数据结构，但效率上就打了个折扣。")]),t._v(" "),a("p",[t._v("学习算法非常重要，因为解决同样的问题，往往可以使用多种算法。对于高效程序员来说，知道哪种算法效率最高非常重要。比如，现在至少有六七种排序算法，如果知道快速排序比选择排序效率更高，那么就会让排序过程变得高效。又比如，实现一个线性查找的算法很简单，但是如果知道有时二分查找可能比线性查找快两倍以上，那你势必会写出一个更好的程序。")]),t._v(" "),a("p",[t._v("深入学习数据结构和算法，不仅可以知道哪种数据结构和算法更高效，还会知道如何找出最适合解决手头问题的数据结构和算法。写程序，尤其是用 JavaScript 写程序时，经常需要权衡，知道了本书涵盖的数据结构和算法的优缺点，在解决具体的编程问题时就容易做出正确的选择。")])])}),[],!1,null,null,null);s.default=e.exports}}]);